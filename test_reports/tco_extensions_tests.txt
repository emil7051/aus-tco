============================= test session starts ==============================
platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/edwardmiller/dev/aus-tco/venv/bin/python3.11
cachedir: .pytest_cache
rootdir: /Users/edwardmiller/dev/aus-tco
configfile: pytest.ini
plugins: cov-6.1.1
collecting ... collected 16 items

tests/unit/test_tco_extensions.py::TestEmissionsCalculation::test_bet_emissions PASSED [  6%]
tests/unit/test_tco_extensions.py::TestEmissionsCalculation::test_diesel_emissions PASSED [ 12%]
tests/unit/test_tco_extensions.py::TestEmissionsCalculation::test_bet_vs_diesel_emissions PASSED [ 18%]
tests/unit/test_tco_extensions.py::TestInvestmentAnalysis::test_investment_analysis_calculation FAILED [ 25%]
tests/unit/test_tco_extensions.py::TestInvestmentAnalysis::test_no_payback_investment PASSED [ 31%]
tests/unit/test_tco_extensions.py::TestComponentBreakdown::test_component_value_access PASSED [ 37%]
tests/unit/test_tco_extensions.py::TestComponentBreakdown::test_component_breakdown_calculation PASSED [ 43%]
tests/unit/test_tco_extensions.py::TestSensitivityAnalysis::test_single_parameter_sensitivity FAILED [ 50%]
tests/unit/test_tco_extensions.py::TestSensitivityAnalysis::test_multiple_parameter_sensitivity PASSED [ 56%]
tests/unit/test_tco_extensions.py::TestSensitivityAnalysis::test_parameter_impact_with_tipping_point FAILED [ 62%]
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation PASSED [ 68%]
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data PASSED [ 75%]
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis PASSED [ 81%]
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_environmental_integration PASSED [ 87%]
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_live_preview_integration PASSED [ 93%]
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow PASSED [100%]

=================================== FAILURES ===================================
_________ TestInvestmentAnalysis.test_investment_analysis_calculation __________

self = <tests.unit.test_tco_extensions.TestInvestmentAnalysis object at 0x11cfaabd0>
bet_scenario = ScenarioInput(scenario_name='BET Test Scenario', vehicle=BETParameters(name='Example BET', type=<VehicleType.BATTERY_E...n'>, loan_term_years=5, loan_interest_rate=0.07, down_payment_percentage=0.2), created_date=datetime.date(2025, 4, 14))
diesel_scenario = ScenarioInput(scenario_name='Diesel Test Scenario', vehicle=DieselParameters(name='Example Diesel Truck', type=<Vehicl...n'>, loan_term_years=5, loan_interest_rate=0.07, down_payment_percentage=0.2), created_date=datetime.date(2025, 4, 14))

    def test_investment_analysis_calculation(self, bet_scenario, diesel_scenario):
        """Test investment analysis between vehicles with different profiles."""
        calculator = TCOCalculator()
    
        # Make BET more expensive upfront but cheaper over time
        bet_scenario.vehicle.purchase_price = 500000  # Higher upfront
        bet_scenario.economic.electricity_price_aud_per_kwh = 0.15  # Lower energy cost
    
        diesel_scenario.vehicle.purchase_price = 300000  # Lower upfront
        diesel_scenario.economic.diesel_price_aud_per_l = 1.8  # Higher energy cost
    
        # Calculate TCO for both vehicles
        bet_result = calculator.calculate(bet_scenario)
        diesel_result = calculator.calculate(diesel_scenario)
    
        # Compare results
        comparison = calculator.compare(bet_result, diesel_result)
    
        # Verify investment analysis was calculated
        assert comparison.investment_analysis is not None
        assert isinstance(comparison.investment_analysis, InvestmentAnalysis)
    
        # Verify investment analysis has expected properties
>       assert comparison.investment_analysis.payback_years is not None
E       AssertionError: assert None is not None
E        +  where None = InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False).payback_years
E        +    where InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False) = ComparisonResult(scenario_1=TCOOutput(scenario_name='BET Test Scenario', vehicle_name='Example BET', vehicle_type=<VehicleType.BATTERY_ELECTRIC: 'battery_electric'>, analysis_period_years=15, total_distance_km=1500000.0, annual_costs=AnnualCostsCollection(costs=[AnnualCosts(year=0, calendar_year=2025, acquisition=195045.75299367745, energy=65777.77777777778, maintenance=19416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=25000.0, registration=4000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=1, calendar_year=2026, acquisition=95045.75299367744, energy=65209.99999999999, maintenance=20216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=22295.0, registration=4100.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=2, calendar_year=2027, acquisition=95045.75299367744, energy=64642.22222222222, maintenance=21016.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=19680.000000000004, registration=4200.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=3, calendar_year=2028, acquisition=95045.75299367744, energy=64074.44444444444, maintenance=21816.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=17155.0, registration=4300.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=4, calendar_year=2029, acquisition=95045.75299367744, energy=63506.66666666666, maintenance=22616.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=14720.0, registration=4400.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=5, calendar_year=2030, acquisition=0.0, energy=62938.88888888888, maintenance=23416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=12375.0, registration=4500.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=6, calendar_year=2031, acquisition=0.0, energy=62371.1111111111, maintenance=24216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=11220.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=7, calendar_year=2032, acquisition=0.0, energy=61803.33333333333, maintenance=25016.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=10105.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=8, calendar_year=2033, acquisition=0.0, energy=61235.555555555555, maintenance=25816.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=9030.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=9, calendar_year=2034, acquisition=0.0, energy=60667.77777777778, maintenance=26616.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7995.000000000001, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=10, calendar_year=2035, acquisition=0.0, energy=60100.0, maintenance=27416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7000.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=11, calendar_year=2036, acquisition=0.0, energy=59532.22222222222, maintenance=28216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=6400.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=12, calendar_year=2037, acquisition=0.0, energy=58964.444444444445, maintenance=29016.666666666668, infrastructure=0.0, battery_replacement=20001.051488425604, insurance=5800.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=13, calendar_year=2038, acquisition=0.0, energy=58396.666666666664, maintenance=29816.666666666668, infrastructure=0.0, battery_replacement=18400.96736935156, insurance=5200.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=14, calendar_year=2039, acquisition=0.0, energy=57828.88888888888, maintenance=30616.66666666667, infrastructure=0.0, battery_replacement=16928.889979803436, insurance=4600.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=-75000.00000000001)]), npv_costs=NPVCosts(acquisition=516985.7974129515, energy=609173.0848190256, maintenance=234118.3247582733, infrastructure=0.0, battery_replacement=23081.768728741838, insurance=133571.95546332773, registration=44801.8287185943, carbon_tax=0.0, other_taxes=24363.669963666955, residual_value=-29086.293076299353), total_tco=1557010.1367882818, lcod=1.0380067578588545, total_nominal_cost=2144434.673805968, calculation_date=datetime.date(2025, 4, 14), emissions=EmissionsData(annual_co2_tonnes=[120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0], total_co2_tonnes=1800.0, energy_consumption_kwh=2250000.0, energy_per_km=1.5, co2_per_km=1200.0, trees_equivalent=81000, homes_equivalent=216.0, cars_equivalent=396.0)), scenario_2=TCOOutput(scenario_name='Diesel Test Scenario', vehicle_name='Example Diesel Truck', vehicle_type=<VehicleType.DIESEL: 'diesel'>, analysis_period_years=15, total_distance_km=1500000.0, annual_costs=AnnualCostsCollection(costs=[AnnualCosts(year=0, calendar_year=2025, acquisition=117027.45179620647, energy=6469450.0, maintenance=20916.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=12000.0, registration=5000.0, carbon_tax=281158.8, other_taxes=281400.0, residual_value=0.0), AnnualCosts(year=1, calendar_year=2026, acquisition=57027.45179620647, energy=6469450.0, maintenance=21716.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=10701.6, registration=5000.0, carbon_tax=295216.74, other_taxes=295470.0, residual_value=0.0), AnnualCosts(year=2, calendar_year=2027, acquisition=57027.45179620647, energy=6469450.0, maintenance=22516.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=9446.400000000001, registration=5000.0, carbon_tax=309977.577, other_taxes=310243.5, residual_value=0.0), AnnualCosts(year=3, calendar_year=2028, acquisition=57027.45179620647, energy=6469450.0, maintenance=23466.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=8234.4, registration=5000.0, carbon_tax=325476.45585, other_taxes=325755.67500000005, residual_value=0.0), AnnualCosts(year=4, calendar_year=2029, acquisition=57027.45179620647, energy=6469450.0, maintenance=24416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7065.6, registration=5000.0, carbon_tax=341750.27864250005, other_taxes=342043.45875000005, residual_value=0.0), AnnualCosts(year=5, calendar_year=2030, acquisition=0.0, energy=6469450.0, maintenance=25366.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=5940.0, registration=5000.0, carbon_tax=358837.79257462505, other_taxes=359145.6316875001, residual_value=0.0), AnnualCosts(year=6, calendar_year=2031, acquisition=0.0, energy=6469450.0, maintenance=26316.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=5385.6, registration=5000.0, carbon_tax=376779.6822033563, other_taxes=377102.9132718751, residual_value=0.0), AnnualCosts(year=7, calendar_year=2032, acquisition=0.0, energy=6469450.0, maintenance=27266.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=4850.4, registration=5000.0, carbon_tax=395618.6663135242, other_taxes=395958.0589354689, residual_value=0.0), AnnualCosts(year=8, calendar_year=2033, acquisition=0.0, energy=6469450.0, maintenance=28066.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=4334.4, registration=5000.0, carbon_tax=415399.5996292004, other_taxes=415755.96188224235, residual_value=0.0), AnnualCosts(year=9, calendar_year=2034, acquisition=0.0, energy=6469450.0, maintenance=28866.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3837.6000000000004, registration=5000.0, carbon_tax=436169.57961066044, other_taxes=436543.7599763545, residual_value=0.0), AnnualCosts(year=10, calendar_year=2035, acquisition=0.0, energy=6469450.0, maintenance=29666.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3360.0, registration=5000.0, carbon_tax=457978.05859119346, other_taxes=458370.9479751722, residual_value=0.0), AnnualCosts(year=11, calendar_year=2036, acquisition=0.0, energy=6469450.0, maintenance=30466.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3072.0, registration=5000.0, carbon_tax=480876.9615207531, other_taxes=481289.4953739308, residual_value=0.0), AnnualCosts(year=12, calendar_year=2037, acquisition=0.0, energy=6469450.0, maintenance=31266.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=2784.0, registration=5000.0, carbon_tax=504920.8095967908, other_taxes=505353.9701426274, residual_value=0.0), AnnualCosts(year=13, calendar_year=2038, acquisition=0.0, energy=6469450.0, maintenance=32066.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=2496.0, registration=5000.0, carbon_tax=530166.8500766304, other_taxes=530621.6686497588, residual_value=0.0), AnnualCosts(year=14, calendar_year=2039, acquisition=0.0, energy=6469450.0, maintenance=32866.66666666667, infrastructure=0.0, battery_replacement=0.0, insurance=2208.0, registration=5000.0, carbon_tax=556675.192580462, other_taxes=557152.7520822467, residual_value=-45000.00000000001)]), npv_costs=NPVCosts(acquisition=310191.4784477709, energy=63047817.858578086, maintenance=252792.68534095597, infrastructure=0.0, battery_replacement=0.0, insurance=64114.538622397304, registration=48727.33992733391, carbon_tax=3707863.3402095092, other_taxes=3711044.235268311, residual_value=-17451.77584577961), total_tco=71125099.70054859, lcod=47.41673313369906, total_nominal_cost=110047064.0968979, calculation_date=datetime.date(2025, 4, 14), emissions=EmissionsData(annual_co2_tonnes=[9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0], total_co2_tonnes=140700.0, energy_consumption_kwh=525000000.0, energy_per_km=350.0, co2_per_km=93800.0, trees_equivalent=6331500, homes_equivalent=16884.0, cars_equivalent=30954.0)), tco_difference=69568089.56376031, tco_percentage=4468.056303555074, lcod_difference=46.37872637584021, lcod_difference_percentage=4468.056303555075, payback_year=0, investment_analysis=InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False)).investment_analysis

tests/unit/test_tco_extensions.py:108: AssertionError
__________ TestSensitivityAnalysis.test_single_parameter_sensitivity ___________

self = <tests.unit.test_tco_extensions.TestSensitivityAnalysis object at 0x11cfb8a10>
bet_scenario = ScenarioInput(scenario_name='BET Test Scenario', vehicle=BETParameters(name='Example BET', type=<VehicleType.BATTERY_E...n'>, loan_term_years=5, loan_interest_rate=0.07, down_payment_percentage=0.2), created_date=datetime.date(2025, 4, 14))

    def test_single_parameter_sensitivity(self, bet_scenario):
        """Test performing sensitivity analysis on a single parameter."""
        calculator = TCOCalculator()
    
        # Define parameter and variations
        parameter = "economic.electricity_price_aud_per_kwh"
        variations = [0.15, 0.20, 0.25, 0.30, 0.35]  # Different electricity prices
    
        # Perform sensitivity analysis
        sensitivity = calculator.perform_sensitivity_analysis(
            bet_scenario,
            parameter,
            variations
        )
    
        # Verify sensitivity result has the expected structure
        assert sensitivity["parameter"] == parameter
        assert sensitivity["variation_values"] == variations
        assert len(sensitivity["tco_values"]) == len(variations)
        assert len(sensitivity["lcod_values"]) == len(variations)
        assert sensitivity["original_value"] is not None
        assert sensitivity["original_tco"] is not None
        assert sensitivity["unit"] == "$/kWh"
    
        # Verify that higher electricity prices result in higher TCO
>       assert sensitivity["tco_values"][0] < sensitivity["tco_values"][-1]
E       assert 1557010.1367882818 < 1557010.1367882818

tests/unit/test_tco_extensions.py:227: AssertionError
_______ TestSensitivityAnalysis.test_parameter_impact_with_tipping_point _______

self = <tests.unit.test_tco_extensions.TestSensitivityAnalysis object at 0x11cfaa250>
bet_scenario = ScenarioInput(scenario_name='BET Test Scenario', vehicle=BETParameters(name='Example BET', type=<VehicleType.BATTERY_E...n'>, loan_term_years=5, loan_interest_rate=0.07, down_payment_percentage=0.2), created_date=datetime.date(2025, 4, 14))
diesel_scenario = ScenarioInput(scenario_name='Diesel Test Scenario', vehicle=DieselParameters(name='Example Diesel Truck', type=<Vehicl...n'>, loan_term_years=5, loan_interest_rate=0.07, down_payment_percentage=0.2), created_date=datetime.date(2025, 4, 14))

    def test_parameter_impact_with_tipping_point(self, bet_scenario, diesel_scenario):
        """Test finding a tipping point in parameter sensitivity analysis."""
        calculator = TCOCalculator()
    
        # Set up scenarios to have a tipping point for diesel price
        bet_scenario.economic.electricity_price_aud_per_kwh = 0.25  # Fixed electricity price
        diesel_scenario.economic.diesel_price_aud_per_l = 1.5  # Starting diesel price
    
        # Define parameter and variations that should cross a tipping point
        parameter = "economic.diesel_price_aud_per_l"
        variations = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5]
    
        # Perform sensitivity analysis for both vehicles
        sensitivity_bet = calculator.perform_sensitivity_analysis(
            bet_scenario,
            "economic.electricity_price_aud_per_kwh",
            [0.25] * len(variations)  # Constant electricity price
        )
    
        sensitivity_diesel = calculator.perform_sensitivity_analysis(
            diesel_scenario,
            parameter,
            variations
        )
    
        # Check if there's a tipping point
        # This means TCO values for diesel should start lower than BET but end higher
        bet_tco = sensitivity_bet["tco_values"][0]  # Constant value
        diesel_tco = sensitivity_diesel["tco_values"]
    
        # Check if diesel TCO crosses BET TCO at some point
        crosses = False
        for i in range(1, len(diesel_tco)):
            if (diesel_tco[i-1] < bet_tco and diesel_tco[i] >= bet_tco) or \
               (diesel_tco[i-1] >= bet_tco and diesel_tco[i] < bet_tco):
                crosses = True
                break
    
        # Assert there is a tipping point or the appropriate conditions are met
        # This could be either an actual crossing or the diesel is initially cheaper
        # but becomes more expensive as diesel price increases
>       assert crosses or (diesel_tco[0] < bet_tco and diesel_tco[-1] > bet_tco)
E       assert (False or (43980129.87814817 < 1557010.1367882818))

tests/unit/test_tco_extensions.py:295: AssertionError
=============================== warnings summary ===============================
tco_model/schemas.py:70
  /Users/edwardmiller/dev/aus-tco/tco_model/schemas.py:70: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('min_rate', 'max_rate')

tco_model/schemas.py:118
  /Users/edwardmiller/dev/aus-tco/tco_model/schemas.py:118: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('major_service_interval_km')

tco_model/schemas.py:131
  /Users/edwardmiller/dev/aus-tco/tco_model/schemas.py:131: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('year_5', 'year_10', 'year_15')

tco_model/schemas.py:165
  /Users/edwardmiller/dev/aus-tco/tco_model/schemas.py:165: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('min_rate', 'max_rate')

tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:513: PydanticDeprecatedSince211: Accessing the 'model_computed_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.
    value1 = getattr(obj1, attr)

tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:519: PydanticDeprecatedSince211: Accessing the 'model_computed_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.
    value2 = getattr(obj2, attr)

tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:513: PydanticDeprecatedSince211: Accessing the 'model_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.
    value1 = getattr(obj1, attr)

tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_excel_export_generation
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_emissions_data
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
tests/unit/test_tco_extensions.py::TestResultsExport::test_export_with_investment_analysis
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:519: PydanticDeprecatedSince211: Accessing the 'model_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.
    value2 = getattr(obj2, attr)

tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:513: PydanticDeprecatedSince211:
  
  Accessing the 'model_computed_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.

tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:519: PydanticDeprecatedSince211:
  
  Accessing the 'model_computed_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.

tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:513: PydanticDeprecatedSince211:
  
  Accessing the 'model_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.

tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
tests/unit/test_tco_extensions.py::TestCompleteIntegration::test_complete_workflow
  /Users/edwardmiller/dev/aus-tco/ui/results/utils.py:519: PydanticDeprecatedSince211:
  
  Accessing the 'model_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform darwin, python 3.11.9-final-0 _______________

Name                       Stmts   Miss  Cover   Missing
--------------------------------------------------------
tco_model/__init__.py          1      0   100%
tco_model/calculator.py      239     27    89%   319, 324, 365, 382-397, 420-424, 430-431, 437, 465, 492, 530, 543-544, 555-557, 605, 730
tco_model/costs.py           156    124    21%   27-31, 49-69, 90-155, 178-215, 233-261, 279-308, 332-368, 400, 412, 450-487
tco_model/models.py          503    114    77%   97-99, 104-107, 116-164, 179, 183-184, 188, 221-224, 249, 251, 255, 282, 284, 302-307, 327, 333-338, 360, 365, 369, 396, 441, 448, 460-462, 488-498, 544-550, 587-589, 637, 647, 652, 657, 662, 667, 672, 677, 682, 687, 692, 698, 703, 722, 739, 744, 791, 798, 803, 808, 813, 839-857, 869-871
tco_model/schemas.py         122     12    90%   72-74, 120-122, 133-135, 167-169
tco_model/strategies.py      361     66    82%   39, 51, 72, 86, 124, 167, 199, 240, 245, 290, 328, 364-381, 395, 399, 404, 433, 445, 538, 584, 630, 642, 676, 716, 757, 824, 836, 866, 873-883, 917, 922, 945, 957, 986, 1028-1036, 1057, 1069, 1145, 1185, 1221, 1233, 1337, 1346-1360
tco_model/terminology.py     124     71    43%   604, 619, 631, 643-645, 670-704, 717, 730, 743-749, 763-767, 780-783, 797-815, 830-860
tco_model/vehicles.py        113    113     0%   8-330
--------------------------------------------------------
TOTAL                       1619    527    67%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
=========================== short test summary info ============================
FAILED tests/unit/test_tco_extensions.py::TestInvestmentAnalysis::test_investment_analysis_calculation - AssertionError: assert None is not None
 +  where None = InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False).payback_years
 +    where InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False) = ComparisonResult(scenario_1=TCOOutput(scenario_name='BET Test Scenario', vehicle_name='Example BET', vehicle_type=<VehicleType.BATTERY_ELECTRIC: 'battery_electric'>, analysis_period_years=15, total_distance_km=1500000.0, annual_costs=AnnualCostsCollection(costs=[AnnualCosts(year=0, calendar_year=2025, acquisition=195045.75299367745, energy=65777.77777777778, maintenance=19416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=25000.0, registration=4000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=1, calendar_year=2026, acquisition=95045.75299367744, energy=65209.99999999999, maintenance=20216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=22295.0, registration=4100.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=2, calendar_year=2027, acquisition=95045.75299367744, energy=64642.22222222222, maintenance=21016.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=19680.000000000004, registration=4200.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=3, calendar_year=2028, acquisition=95045.75299367744, energy=64074.44444444444, maintenance=21816.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=17155.0, registration=4300.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=4, calendar_year=2029, acquisition=95045.75299367744, energy=63506.66666666666, maintenance=22616.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=14720.0, registration=4400.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=5, calendar_year=2030, acquisition=0.0, energy=62938.88888888888, maintenance=23416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=12375.0, registration=4500.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=6, calendar_year=2031, acquisition=0.0, energy=62371.1111111111, maintenance=24216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=11220.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=7, calendar_year=2032, acquisition=0.0, energy=61803.33333333333, maintenance=25016.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=10105.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=8, calendar_year=2033, acquisition=0.0, energy=61235.555555555555, maintenance=25816.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=9030.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=9, calendar_year=2034, acquisition=0.0, energy=60667.77777777778, maintenance=26616.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7995.000000000001, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=10, calendar_year=2035, acquisition=0.0, energy=60100.0, maintenance=27416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7000.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=11, calendar_year=2036, acquisition=0.0, energy=59532.22222222222, maintenance=28216.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=6400.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=12, calendar_year=2037, acquisition=0.0, energy=58964.444444444445, maintenance=29016.666666666668, infrastructure=0.0, battery_replacement=20001.051488425604, insurance=5800.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=13, calendar_year=2038, acquisition=0.0, energy=58396.666666666664, maintenance=29816.666666666668, infrastructure=0.0, battery_replacement=18400.96736935156, insurance=5200.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=0.0), AnnualCosts(year=14, calendar_year=2039, acquisition=0.0, energy=57828.88888888888, maintenance=30616.66666666667, infrastructure=0.0, battery_replacement=16928.889979803436, insurance=4600.0, registration=5000.0, carbon_tax=0.0, other_taxes=2500.0, residual_value=-75000.00000000001)]), npv_costs=NPVCosts(acquisition=516985.7974129515, energy=609173.0848190256, maintenance=234118.3247582733, infrastructure=0.0, battery_replacement=23081.768728741838, insurance=133571.95546332773, registration=44801.8287185943, carbon_tax=0.0, other_taxes=24363.669963666955, residual_value=-29086.293076299353), total_tco=1557010.1367882818, lcod=1.0380067578588545, total_nominal_cost=2144434.673805968, calculation_date=datetime.date(2025, 4, 14), emissions=EmissionsData(annual_co2_tonnes=[120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0], total_co2_tonnes=1800.0, energy_consumption_kwh=2250000.0, energy_per_km=1.5, co2_per_km=1200.0, trees_equivalent=81000, homes_equivalent=216.0, cars_equivalent=396.0)), scenario_2=TCOOutput(scenario_name='Diesel Test Scenario', vehicle_name='Example Diesel Truck', vehicle_type=<VehicleType.DIESEL: 'diesel'>, analysis_period_years=15, total_distance_km=1500000.0, annual_costs=AnnualCostsCollection(costs=[AnnualCosts(year=0, calendar_year=2025, acquisition=117027.45179620647, energy=6469450.0, maintenance=20916.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=12000.0, registration=5000.0, carbon_tax=281158.8, other_taxes=281400.0, residual_value=0.0), AnnualCosts(year=1, calendar_year=2026, acquisition=57027.45179620647, energy=6469450.0, maintenance=21716.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=10701.6, registration=5000.0, carbon_tax=295216.74, other_taxes=295470.0, residual_value=0.0), AnnualCosts(year=2, calendar_year=2027, acquisition=57027.45179620647, energy=6469450.0, maintenance=22516.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=9446.400000000001, registration=5000.0, carbon_tax=309977.577, other_taxes=310243.5, residual_value=0.0), AnnualCosts(year=3, calendar_year=2028, acquisition=57027.45179620647, energy=6469450.0, maintenance=23466.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=8234.4, registration=5000.0, carbon_tax=325476.45585, other_taxes=325755.67500000005, residual_value=0.0), AnnualCosts(year=4, calendar_year=2029, acquisition=57027.45179620647, energy=6469450.0, maintenance=24416.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=7065.6, registration=5000.0, carbon_tax=341750.27864250005, other_taxes=342043.45875000005, residual_value=0.0), AnnualCosts(year=5, calendar_year=2030, acquisition=0.0, energy=6469450.0, maintenance=25366.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=5940.0, registration=5000.0, carbon_tax=358837.79257462505, other_taxes=359145.6316875001, residual_value=0.0), AnnualCosts(year=6, calendar_year=2031, acquisition=0.0, energy=6469450.0, maintenance=26316.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=5385.6, registration=5000.0, carbon_tax=376779.6822033563, other_taxes=377102.9132718751, residual_value=0.0), AnnualCosts(year=7, calendar_year=2032, acquisition=0.0, energy=6469450.0, maintenance=27266.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=4850.4, registration=5000.0, carbon_tax=395618.6663135242, other_taxes=395958.0589354689, residual_value=0.0), AnnualCosts(year=8, calendar_year=2033, acquisition=0.0, energy=6469450.0, maintenance=28066.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=4334.4, registration=5000.0, carbon_tax=415399.5996292004, other_taxes=415755.96188224235, residual_value=0.0), AnnualCosts(year=9, calendar_year=2034, acquisition=0.0, energy=6469450.0, maintenance=28866.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3837.6000000000004, registration=5000.0, carbon_tax=436169.57961066044, other_taxes=436543.7599763545, residual_value=0.0), AnnualCosts(year=10, calendar_year=2035, acquisition=0.0, energy=6469450.0, maintenance=29666.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3360.0, registration=5000.0, carbon_tax=457978.05859119346, other_taxes=458370.9479751722, residual_value=0.0), AnnualCosts(year=11, calendar_year=2036, acquisition=0.0, energy=6469450.0, maintenance=30466.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=3072.0, registration=5000.0, carbon_tax=480876.9615207531, other_taxes=481289.4953739308, residual_value=0.0), AnnualCosts(year=12, calendar_year=2037, acquisition=0.0, energy=6469450.0, maintenance=31266.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=2784.0, registration=5000.0, carbon_tax=504920.8095967908, other_taxes=505353.9701426274, residual_value=0.0), AnnualCosts(year=13, calendar_year=2038, acquisition=0.0, energy=6469450.0, maintenance=32066.666666666668, infrastructure=0.0, battery_replacement=0.0, insurance=2496.0, registration=5000.0, carbon_tax=530166.8500766304, other_taxes=530621.6686497588, residual_value=0.0), AnnualCosts(year=14, calendar_year=2039, acquisition=0.0, energy=6469450.0, maintenance=32866.66666666667, infrastructure=0.0, battery_replacement=0.0, insurance=2208.0, registration=5000.0, carbon_tax=556675.192580462, other_taxes=557152.7520822467, residual_value=-45000.00000000001)]), npv_costs=NPVCosts(acquisition=310191.4784477709, energy=63047817.858578086, maintenance=252792.68534095597, infrastructure=0.0, battery_replacement=0.0, insurance=64114.538622397304, registration=48727.33992733391, carbon_tax=3707863.3402095092, other_taxes=3711044.235268311, residual_value=-17451.77584577961), total_tco=71125099.70054859, lcod=47.41673313369906, total_nominal_cost=110047064.0968979, calculation_date=datetime.date(2025, 4, 14), emissions=EmissionsData(annual_co2_tonnes=[9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0, 9380.0], total_co2_tonnes=140700.0, energy_consumption_kwh=525000000.0, energy_per_km=350.0, co2_per_km=93800.0, trees_equivalent=6331500, homes_equivalent=16884.0, cars_equivalent=30954.0)), tco_difference=69568089.56376031, tco_percentage=4468.056303555074, lcod_difference=46.37872637584021, lcod_difference_percentage=4468.056303555075, payback_year=0, investment_analysis=InvestmentAnalysis(payback_years=None, roi=None, npv_difference=69568089.56376031, irr=nan, has_payback=False)).investment_analysis
FAILED tests/unit/test_tco_extensions.py::TestSensitivityAnalysis::test_single_parameter_sensitivity - assert 1557010.1367882818 < 1557010.1367882818
FAILED tests/unit/test_tco_extensions.py::TestSensitivityAnalysis::test_parameter_impact_with_tipping_point - assert (False or (43980129.87814817 < 1557010.1367882818))
================== 3 failed, 13 passed, 52 warnings in 2.04s ===================
